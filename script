import yaml
import numpy as np
import sys, os
import argparse  
import pathlib 
import jinja2

def change_camera_model(camera_model):
	if camera_model == 'pinhole':
		return 'pinhole'
	elif camera_model == 'omni':
		return 'omnidirectional'
	elif camera_model == 'ds':
		return 'double sphere'
	elif camera_model == 'eucm':
		return 'extended unified'

def change_distortion_model(distortion_model):
	if distortion_model == 'radtan':
		return 'radial-tangential'
	elif distortion_model == 'equi':
		return 'equidistant'
	elif distortion_model == 'fov':
		return 'fov'
	elif distortion_model == 'none':
		return 'none'

def write_cam_data(camera_name, camera_data):
	asl_data = {}
	asl_data['camera_id'] = camera_name
	T_BS = np.array(camera_data['T_cam_imu'])
	asl_data['T_BS'] = {'cols': T_BS.shape[1], 'rows': T_BS.shape[0], 'data': T_BS}
	asl_data['rate_hz'] = 10
	asl_data['resolution'] = camera_data['resolution']
	asl_data['camera_model'] = change_camera_model(camera_data['camera_model'])
	asl_data['intrinsics'] = np.array(camera_data['intrinsics'])
	asl_data['distortion_model'] = change_distortion_model(camera_data['distortion_model'])
	asl_data['distortion_coefficients'] = np.array(camera_data['distortion_coeffs'])
	return asl_data
	
def write_imu_data(imu_name, imu_data):
	asl_data = {}
	asl_data['imu_preintegration_type'] = 1
	T_BS = np.array(imu_data['T_i_b'])
	asl_data['T_BS'] = {'cols': T_BS.shape[1], 'rows': T_BS.shape[0], 'data': T_BS}
	asl_data['rate_hz'] = imu_data['update_rate']
	asl_data['gyroscope_noise_density'] = imu_data['gyroscope_noise_density']
	asl_data['gyroscope_random_walk'] = imu_data['gyroscope_random_walk']
	asl_data['accelerometer_noise_density'] = imu_data['accelerometer_noise_density']
	asl_data['accelerometer_random_walk'] = imu_data['accelerometer_random_walk']
	return asl_data

def numpy_display(value, flat=True, str_format=' 1.8f'):
	if type(value) is not np.ndarray:
		return str(value)
	if len(value.shape) > 2:
		return str(value)
	if value.size == 0:
		return str(value)
	
	float_format = ('{{:{}}}'.format(str_format)).format
	
	with np.printoptions(floatmode='fixed', suppress=True):
		is_flat = len(value.shape) == 1
		can_be_flat = is_flat or value.shape[0] == 1 or value.shape[1] == 1
		
		if flat or can_be_flat:
			elements = np.squeeze(value).tolist()
			contents = ', '.join(map(float_format, elements))
			return '[{}]'.format(contents[1:] if contents[0] == ' ' else contents)
		
		to_render = [', '.join(map(float_format, np.squeeze(row).tolist())) for row in value]
		contents = ',\n'.join(to_render)
		
		if contents[0] == ' ':
			return ' [{}]'.format(contents[1:])
		else:
			return '[{}]'.format(contents)
		

def create_asl_files(output, asl_imu, left_camera, right_camera=None):
	template_path = pathlib.Path(__file__).absolute().parent / 'templates'
	env = jinja2.Environment(loader=jinja2.FileSystemLoader(str(template_path)))
	env.filters['numpy_display'] = numpy_display
	imu_template = env.get_template('imu.yaml')
	camera_template = env.get_template('camera.yaml')
	
	with open(os.path.join(output, 'ImuParams.yaml'), 'w') as f:
			f.write(imu_template.render(**asl_imu))
	
	with open(os.path.join(output, 'LeftCameraParams.yaml'), 'w') as f:
			f.write(camera_template.render(**left_camera))
	
	if right_camera is None:
		return
	
	with open(os.path.join(output, 'RightCameraParams.yaml'), 'w') as f:
			f.write(camera_template.render(**right_camera))
	
	
#setup the argument list
parser = argparse.ArgumentParser()
parser.add_argument('--folder', metavar='folder', nargs='?', help='Data folder')
parser.add_argument('--output', metavar='output', default="asl_files", help='Output file %(default)s')

#parse the args
parsed = parser.parse_args()

#create the folder
os.makedirs(parsed.output, exist_ok=True)

#if the directory is unspecified
datafolder = pathlib.Path(parsed.folder if parsed.folder else os.getcwd())

#write cam data
camfiles = list(datafolder.glob("camchain-*imu*cam*.yaml"))
with open(camfiles[0], 'r') as f:
	kalibr_data = yaml.load(f.read(), Loader=yaml.SafeLoader)
	asl_right_camera = None
	for camera_name, camera_data in kalibr_data.items():
		if camera_name == 'cam0':
			asl_left_camera = write_cam_data('left_cam', camera_data)
		elif camera_name == 'cam1':
			asl_right_camera = write_cam_data('right_cam', camera_data)

#write imu data
imufiles = list(datafolder.glob("imu*.yaml")) 
with open(imufiles[0], 'r') as f:
	kalibr_data = yaml.load(f.read(), Loader=yaml.SafeLoader)
	for imu_name, imu_data in kalibr_data.items(): 
		asl_imu = write_imu_data(imu_name, imu_data)

create_asl_files(parsed.output, asl_imu, asl_left_camera, asl_right_camera)
