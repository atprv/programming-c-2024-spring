#include <iostream>
#include <stack>
#include <string>
using namespace std;

double calculate(double n1, double n2, char op)
{
	switch (op)
	{
	case '+':
		return (n1 + n2);
	case '-':
		return (n1 - n2);
	case '*':
		return (n1 * n2);
	case '/':
		return (n1 / n2);
	case ':':
		return (n1 / n2);
	}
}

int comparison(char op1, char op2)
{
	if (op1 == '(')
		return 0;
	
	int pr_op1, pr_op2;
	if ((op1 == '*') || (op1 == '/') || (op1 == ':'))
		pr_op1 = 1;
	else pr_op1 = 0;

	if ((op2 == '*') || (op2 == '/') || (op2 == ':'))
		pr_op2 = 1;
	else pr_op2 = 0;

	return (pr_op1 >= pr_op2);
}

string f1(string s)
{
	string number, prev_op;
	string res;
	stack <char> operations;

	for (char x : s)
	{
		if (isdigit(x) || x == '.')
			number += x;
			
		else
		{
			if (!number.empty())
			{
				res += number + " ";
				number.clear();
			}

			if (x == '(')
				operations.push(x);
				
			else if (x == ')')
			{
				do
				{
					prev_op = operations.top();
					res += prev_op + " ";
					operations.pop();
				} while (operations.top() != '(');

				operations.pop();
			}
			
			else
			{
				while (!operations.empty() && comparison(operations.top(), x))
				{
					prev_op = operations.top();
					res += prev_op + " ";
					operations.pop();
				}
				operations.push(x);
			}
		}
	}

	if (!number.empty())
	{
		res += number + " ";
		number.clear();
	}

	while (!operations.empty())
	{
		prev_op = operations.top();
		res += prev_op + " ";
		operations.pop();
	}

	return res;
}

double f2(string s)
{
	string number;
	stack <double> res;
	double num1, num2;

	for (char x : s)
	{
		if (isdigit(x) || x == '.')
			number += x;

		else
		{
			if (!number.empty())
			{
				res.push(stod(number));
				number.clear();
			}

			if (x != ' ')
			{
				num2 = res.top();
				res.pop();
				num1 = res.top();
				res.pop();
				res.push(calculate(num1, num2, x));
			}
		}
	}

	return res.top();
}

double scalc(string s)
{
	s = f1(s);
	return f2(s);
}

int main()
{
	string s_f2 = "1 2 + 4 * 3 +";
	//getline(cin, s_f2);
	cout << f2(s_f2) << endl;

	string s_f1 = "3+4*2/(1-5)";
	//getline(cin, s_f1);
	cout << f1(s_f1) << endl;
	cout << f2(s_f2) << endl;

	string s_f3;
	cin >> s_f3;
	cout << scalc(s_f3) << endl;
}
