//1
#include <iostream>
#include <vector>
using namespace std;

void enlarge(vector<double> &v)
{
	vector<double>::iterator i;
	double summ;

	for (i = v.begin()+1; i != v.end(); i++)
	{
		summ = *i + *(i - 1);
		i = v.insert(i, summ);
		i++;
	}
}

int main()
{
	vector<double> v = { 1.0, 2.0, 4.5, 5.5, 7.9 };
	enlarge(v);

	for (auto x : v)
		cout << x << " ";

	return 0;
}



//2
#include <iostream>
#include <vector>
using namespace std;

void del(vector<double> &v)
{
	vector<double>::iterator i;

	for (i = v.begin(); i != v.end(); i++)
	{
		i = v.erase(i);

		if (i == v.end())
			break;

	}
}

int main()
{
	vector<double> v = { 1.0, 2.0, 4.5, 5.5, 7.9};
	del(v);

	for (auto x : v)
		cout << x << " ";

	return 0;
}



//3
#include <iostream>
#include <vector>
using namespace std;

int main()
{
	vector<double> arr = { 1.0, 2.0, 4.5, 5.5, 7.9 };
	vector<double> arr_new(arr.size());

	copy(arr.begin(), arr.end(), arr_new.begin());

	for (auto x : arr_new)
		cout << x << " ";

	return 0;
}



//4
#include <iostream>
#include <vector>
using namespace std;

vector<double> concat(vector<double> arr1, vector<double> arr2)
{
	vector<double> res;

	copy(arr1.begin(), arr1.end(), inserter(res, res.begin()));
	copy(arr2.begin(), arr2.end(), inserter(res, res.begin()+arr1.size()));

	return res;
}

int main()
{
	vector<double> arr1 = { 1.0, 2.0, 4.5, 5.5, 7.9 };
	vector<double> arr2 = { 3.1, 3.2, 3.3, 3.4 };

	for (auto x : concat(arr1, arr2))
		cout << x << " ";

	return 0;
}



//5
#include <iostream>
#include <vector>
using namespace std;

vector<double> repeat(vector<double> arr, int n)
{
	vector<double> res;

	for (int i = 0; i < n; i++)
	{
		copy(arr.begin(), arr.end(), inserter(res, res.begin() + i*arr.size()));
	}

	return res;
}

int main()
{
	vector<double> arr = { 1.0, 2.0, 4.5, 5.5, 7.9 };
	int n = 3;

	for (auto x : repeat(arr, n))
		cout << x << " ";

	return 0;
}



//6
#include <iostream>
#include <vector>
using namespace std;

int second_occure(vector<int> v, int n)
{
	vector<int>::iterator i;
	int flag = 0;

	for (i = v.begin(); i != v.end(); i++)
	{
		if (*i == n)
			flag++;

		if (flag == 2)
			break;
	}

	return i - v.begin() + 1;
}

int main()
{
	vector<int> v = { 1, 2, 4, 5, 7, 5 };
	int n = 3;

	cout << second_occure(v, n);

	return 0;
}



//7
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int last_occure(vector<int> v, int n)
{
	vector<int>::reverse_iterator i;
	i = find(v.rbegin(), v.rend(), n);

	if (i != v.rend())
		return distance(v.begin(), i.base());
	else
		return i - v.rbegin() + 1;
}

int main()
{
	vector<int> v = { 1, 2, 4, 5, 7, 5 };
	int n = 3;

	cout << last_occure(v, n);

	return 0;
}



//8
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool subseq(vector<int> v1, vector<int> v2)
{
	vector<int>::iterator i;
	i = v1.begin();

	for (int n : v2)
	{
		i = find(i, v1.end(), n);

		if (i == v1.end())
			return false;

		++i;
	}

	return true;
}

int main()
{
	vector<int> v1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9};
	vector<int> v2 = {5, 3, 7, 8};

	cout << subseq(v1, v2);

	return 0;
}



//9
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int find_target(vector<int> v, int n)
{
	vector<int>::iterator i1, i2;
	i1 = lower_bound(v.begin(), v.end(), n);
	i2 = upper_bound(v.begin(), v.end(), n);

	if (i1 != i2)
		return i2 - v.begin();
	else
		return -1;
}

int main()
{
	vector<int> v = { 1, 2, 2, 4, 4, 4, 6, 7 };
	int n = 5;

	cout << find_target(v, n);

	return 0;
}



//10
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int find_target(vector<float> v, float n, int &i, int &j)
{
	vector<float>::iterator i1, i2;
	i1 = lower_bound(v.begin(), v.end(), n);
	i2 = upper_bound(v.begin(), v.end(), n);

	if (i1 == i2)
	{
		i = i1 - v.begin();
		j = i2 - v.begin() + 1;
	}
	else
	{
		i = i1 - v.begin() + 1;
		j = i;
	}

	return 0;
}

int main()
{
	vector<float> v = { 1.251, 4.32, 7.314, 10.5, 15.8, 19.21, 23.5, 28.34 };
	float n = 29;

	int i, j;

	find_target(v, n, i, j);

	cout << i << ' ' << j;

	return 0;
}
